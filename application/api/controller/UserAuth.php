<?php
/**
 * User: 周星
 * Date: 2019/3/25
 * Time: 20:45
 * Email: zhouxing@benbang.com
 */

namespace app\api\controller;

use app\common\helper\WeChat;
use app\common\model\AppletConfig;
use util\ErrorCode;
use util\HttpClient;
use util\Pay;
use util\ReqResp;
use think\Db;
use think\facade\Log;

class UserAuth extends UnLoginBase {

    // 微信小程序通过js_code获取openid接口
    const WX_XCX_JS_CODE_URL = 'https://api.weixin.qq.com/sns/jscode2session';
    const WITHDRAW_MIN_FEE = 1;

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    // 小程序接收授权code接口
    public function receiveCode() {
        try {
            $code = trim(input('post.xcx_code'));
            if (!$code) {
                throw new \Exception('无效的xcx_code', ErrorCode::PARAMS_ERROR);
            }

            // 去微信获取用户信息
            $codeInfo = $this->getOpenidByWx($code);
            // 保存用户信息,返回登录所需token信息
            $userToken = $this->saveUser($codeInfo);

            $return = [
                'user_share_code' => $userToken['user_share_code'],
                'user_token' => $userToken['user_token'],
                'refresh_token' => $userToken['refresh_token'],
            ];
            ReqResp::outputSuccess($return, "success");
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 获取用户openid
    private function getOpenidByWx ($code) {
        $params = config('wx_xcx_config');
        $res = WeChat::miniAppInit($params)->auth->session($code);
        trace("[receiveCode get result]：" . json_encode($res, JSON_UNESCAPED_UNICODE), 'error');
        if (isset($res['errcode']) || !isset($res['openid'])) {
            throw new \Exception($res['errmsg'], ErrorCode::PARAMS_ERROR);
        }
        return $res;
    }

    // 保存用户信息
    private function saveUser (array $codeInfo) {
        // 添加数据到user_info
        Db::startTrans();
        // 用户条件
        $where = ['openid' => $codeInfo['openid']];
        $shareCode = md5($codeInfo['openid']);

        // 用户表
        // 查询用户是否存在，返回用户信息实例
        $user = app('UserInfoModel',true)->checkUserExists($where);

        // 如果用户存在，将id放进数组
        if ($user) {
            $userData = ['user_id' => $user['user_id'],'user_share_code' => $shareCode];
        } else {
            // 用户初始化数据
            $userData = ['openid' => $codeInfo['openid'], 'user_share_code' => $shareCode];
        }

        // 保存用户数据
        $userId = app('UserInfoModel',true)->saveUser($userData);
        if (!$userId) {
            Db::rollback();
            throw new \Exception('网络错误(用户写入失败)，请稍后再试', ErrorCode::NETWORK_ERROR);
        }

        // 第三方表
        // 添加数据到user_third_party
        $userThird = app('UserThirdPartyModel',true)->checkUserExists($where);
        if (!$userThird) {
            $addData = [
                'user_id' => $userId,
                'openid' => $codeInfo['openid'],
                'session_key' => $codeInfo['session_key'],
            ];
            $thirdId = app('UserThirdPartyModel',true)->saveData($addData);
            if (!$thirdId) {
                Db::rollback();
                throw new \Exception('网络错误(第三方用户写入失败)，请稍后再试', ErrorCode::NETWORK_ERROR);
            }
        }

        // 用户token表
        // 默认添加一个小程序的user_token
        $userToken = app('UserTokenModel',true)->saveToken($userId, config('login_xcx'), $codeInfo['openid']);
        if (!$userToken) {
            Db::rollback();
            throw new \Exception('网络错误(用户token写入失败)，请稍后再试', ErrorCode::PARAMS_ERROR);
        }

        Db::commit();
        $userToken['user_share_code'] = $shareCode;
        return $userToken;
    }

    // 小程序接受授权信息接口
    public function receiveUserInfo () {
        try {
            $userId = $this->getUserId();

            $params = input('post.user_info', '');
            if (is_string($params)) {
                $params = json_decode(htmlspecialchars_decode($params), true);
            } else {
                if (!is_array($params)) {
                    $params = (array) $params;
                }
            }
            if (!$params) {
                throw new \Exception('缺少数据', ErrorCode::PARAMS_ERROR);
            }

            Log::record("[receiveUserInfo params] " . json_encode($params), Log::init()::NOTICE);

            if (!$params['avatarUrl']) {
                throw new \Exception('缺少头像', ErrorCode::PARAMS_ERROR);
            }
            if (!$params['nickName']) {
                throw new \Exception('缺少昵称', ErrorCode::PARAMS_ERROR);
            }
            if (!isset($params['gender'])) {
                throw new \Exception('缺少性别', ErrorCode::PARAMS_ERROR);
            }

            $userInfo = array(
                'user_id' => $userId,
                'user_avatar'       => $params['avatarUrl'],
                'user_country'      => $params['country'] ?? '',
                'user_province'     => $params['province'] ?? '',
                'user_city'         => $params['city'] ?? '',
                'user_sex'          => intval($params['gender']),
                'user_language'     => $params['language'] ?? '',
                'user_nickname' => $params['nickName'],
                'user_is_authorize' => config('user_authorized')
            );

            Db::startTrans();
            // 更新user_info
            $userId = app('UserInfoModel',true)->saveUser($userInfo);
            if ($userId === false) {
                Db::rollback();
                throw new \Exception('用户信息更新失败', ErrorCode::UPDATE_FAILED);
            }

            // 更新user_third_party
            $saveData = array(
                'avatar'   => $params['avatarUrl'],
                'nickname' => $params['nickName'],
            );
            $thirdId = app('UserThirdPartyModel',true)->saveData($saveData, [
                'user_id' => $userId]);
            if ($thirdId === false) {
                Db::rollback();
                throw new \Exception('第三方表更新失败', ErrorCode::UPDATE_FAILED);
            }

            Db::commit();

            ReqResp::outputSuccess([], "success");
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 获取新的user_token
    public function renewalUserToken () {
        try {
            $token = trim(input('post.refresh_token'));
            if (empty($token)) {
                throw new \Exception('refresh_token is empty', ErrorCode::PARAMS_ERROR);
            }

            // 验证token
            $token = app('UserTokenModel',true)->verifyUserToken($token, false);
            $userId = $token['user_id'];

            // 生成token
            $userToken = app('UserTokenModel',true)->saveToken($userId, config('login_xcx'));

            $return = [
                'user_token'    => $userToken['user_token'],
                'refresh_token' => $userToken['refresh_token'],
            ];

            ReqResp::outputSuccess($return, "success");
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
    
    // 用户绑定上级
    public function bindSuperior () {
        try {
            $userId = $this->getUserId();
            $user = $this->getUser();

            $shareCode = input('post.user_share_code', null);
            if (!$shareCode) {
                throw new \Exception('请传递分享code', ErrorCode::PARAMS_ERROR);
            }

            // 判断是否为新用户
            if ($user['user_is_authorize'] == config('user_authorized')) {
                throw new \Exception('当前非新用户，不能绑定上级', ErrorCode::NOT_NEW_USER);
            }

            // 判断是否已有上级
            if ($user['user_superior_id'] && app()->model('common/User')->where(['user_id' => $user['user_superior_id']])->find()) {
                ReqResp::outputSuccess();
            }


            if ($shareCode == $user['user_share_code']) {
                throw new \Exception('自己不能成为自己的上级', ErrorCode::ACTION_FAILED);
            }
            // 查询分享用户id
            $shareUid = app()->model('common/User')->where(['user_share_code' => $shareCode])->value('user_id');
            if (!$shareUid) {
                throw new \Exception('分享用户不存在', ErrorCode::USER_NOT_FOUND);
            }

            // 绑定上级
            if (app()->model('common/User')->where(['user_id' => $userId])->setField('user_superior_id', $shareUid)) {
                ReqResp::outputSuccess([], '绑定成功');
            }
            throw new \Exception('绑定失败', ErrorCode::ACTION_FAILED);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 获取用户信息
    public function getUserCenterInfo () {
        try {
            $userId = $this->getUserId();
            $user = $this->getUser();

            // 查询用户订单信息
            $orderNum = [];
            foreach (config('search_order_status') as $k => $status) {
                $orderNum[$k]['main_order_status_title'] = config('search_order_status_title')[$status];
                $orderNum[$k]['main_order_status'] = $status;
                $orderNum[$k]['main_order_num'] = app()->model('common/MainOrder')::where([
                    ['user_id', '=', $userId],
                    ['main_order_is_delete', '=', config('un_deleted')],
                    ['main_order_web_delete', '=', config('un_deleted')],
                    ['main_order_status', '=', $status],
                    ['main_order_user_confirm', '=', config('main_order_user_confirmed')],
                ])->count();
            }

            ReqResp::outputSuccess([
                'order_info' => $orderNum,
                'user_nickname' => $user['user_nickname'],
                'user_avatar' => $user['user_avatar'],
                'user_consume_total_fee' => $user['user_consume_total_fee'],
                'user_commission_fee' => $user['user_commission_fee'],
            ]);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
    
    // 用户提现
    public function userWithdraw () {
        try {
            $user = $this->getUser();
            $money = input('post.money/d', null);
            if (!$money) {
                throw new \Exception('请输入提现金额', ErrorCode::PARAMS_ERROR);
            }
            // 验证用户只能提现整数，且大于1元
            $minFee = getAppletConfig('user_withdraw_min_fee', self::WITHDRAW_MIN_FEE);
            if ($minFee != 0 && $money < $minFee) {
                throw new \Exception("您最少一次提现{$minFee}元", ErrorCode::PARAMS_ERROR);
            }
            if ($money != floor($money)) {
                throw new \Exception('您只能提现整数', ErrorCode::PARAMS_ERROR);
            }
            // 验证用户佣金
            if ($money > $user['user_commission_fee']) {
                throw new \Exception('您的提现金额超过了您的佣金', ErrorCode::USER_COMMISSION_OUT);
            }

            // TODO 增加最少消费过一次，且大于多少才能体现

            // 增加提现记录
            $userWithdrawalData = [
                'user_id' => $user['user_id'],
                'user_withdrawal_timestamp' => time(),
                'user_withdrawal_money' => $money,
                'user_withdrawal_before_commission' => $user['user_commission_fee'],
            ];
            // 增加提现对列表
            $queueWithdrawData = [
                'user_id' => $user['user_id'],
                'queue_withdraw_money' => $money,
                'queue_withdraw_create_timestamp' => time(),
            ];

            Db::startTrans();
            // 添加交易记录
            $row = app()->model('common/UserWithdrawalRecord')->allowField(true)->save($userWithdrawalData);
            if (!$row) {
                Db::rollback();
                throw new \Exception('提现记录添加失败', ErrorCode::ACTION_FAILED);
            }
            $queueWithdrawData['user_withdrawal_id'] = app()->model('common/UserWithdrawalRecord')->getLastInsID();

            // 将佣金减少
            $req = app()->model('common/User')::where(['user_id' => $user['user_id']])->setDec('user_commission_fee', Pay::saveMoneyChange($money));
            if (!$req) {
                Db::rollback();
                throw new \Exception('扣除佣金失败', ErrorCode::ACTION_FAILED);
            }
            // 添加提现队列
            $res = app()->model('common/QueueWithdraw')->allowField(true)->save($queueWithdrawData);
            if (!$res) {
                Db::rollback();
                throw new \Exception('提交失败', ErrorCode::ACTION_FAILED);
            }

            Db::commit();
            ReqResp::outputSuccess([], '提交成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 获取佣金明细
    public function getUserCommissionDetails () {
        try {
            $userId = $this->getUserId();
            list($pageNum, $pageSize) = getPageParams();

            $data = app()->model('common/UserRebateRecord')->alias('urr')->field([
                'user.user_nickname', 'user.user_avatar', 'main.main_order_payment', 'urr.rebate_money', 'urr.rebate_cteate_time',
            ])->where([
                'rebate_user_id' => $userId,
            ])->join([
                ['user user', 'urr.user_id = user.user_id'],
                ['main_order main', 'urr.main_order_no = main.main_order_no'],
            ])->order([
                'main_order_pay_time' => 'desc'
            ])->paginate($pageSize, false, [
                'page' => $pageNum
            ])->toArray();

            $data['user_commission_fee'] = Pay::drawMoneyChange(app()->model('common/User')::where(['user_id' => $userId])->value('user_commission_fee'));
            ReqResp::outputSuccess(handleApiReturn($data));
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 用户提现记录
    public function getUserWithdrawRecord () {
        try {
            list($pageNum, $pageSize) = getPageParams();

            $data = app()->model('common/UserWithdrawalRecord')::field([
                'user_withdrawal_timestamp', 'user_withdrawal_money', 'user_withdrawal_before_commission',
                'user_withdrawal_status',
            ])->where([
                'user_id' => $this->getUserId()
            ])->order(['user_withdrawal_id' => 'desc'])->paginate($pageSize, false, [
                'page' => $pageNum
            ])->toArray();

            ReqResp::outputSuccess(handleApiReturn($data));
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
}