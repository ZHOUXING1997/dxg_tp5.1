<?php
/**
 * User: 周星
 * Date: 2019/5/16
 * Time: 17:11
 * Email: zhouxing@benbang.com
 */

namespace app\api\controller;

use app\common\helper\WeChat;
use util\ErrorCode;
use util\ReqResp;

// 首页相关接口
class Index extends UnLoginBase {

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    // 首页商品分类接口
    public function getProductCate () {
        // TODO 按排序字段(sort)倒叙查询显示在首页的分类
        try {
            $where = cateBaseWhere(null, false);
            // 查询显示且未删除的分类及图标
            $data = app()->model('common/Cate')->field([
                'cate_id', 'cate_title', 'cate_icon', 'cate_description',
            ])->append([
                'cate_icon_url',
            ])->where($where)->order([
                'cate_sort' => 'desc',
                'cate_create_time' => 'desc'
            ])->select()->toArray();

            ReqResp::outputSuccess(handleApiReturn($data));
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 首页轮播
    public function getIndexRotation () {
        // TODO 按排序字段(sort)倒叙查询首页轮播
        // TODO 已开始的活动，且结束时间未到，
        try {
            $actType = input('activity_type', null);

            $where = [
                ['activity_status', '=', config('activity_status_start'),],
                ['activity_is_delete', '=', config('un_deleted'),],
                // ['activity_end_time', '>', time(),],
            ];

            if (null !== $actType) {
                if (!is_array($actType)) {
                    $where[] = ['activity_type', 'in', $actType];
                } else {
                    $where[] = ['activity_type', 'in', explode(',', $actType)];
                }
            }

            // 查询显示且未删除的活动
            $data = app()->model('common/Activity')->field([
                'activity_id', 'activity_type', 'activity_name', 'activity_url', 'activity_cover_img',
            ])->append(['activity_cover_img_url'])->where($where)->order([
                'activity_sort' => 'desc', 'activity_type' => 'asc',
            ])->select()->each(function ($item) {
                // 分类活动增加分类id
                if ($item['activity_type'] == config('activity_type_cate')) {
                    $item['cate_id'] = app()->model('common/Product')::where(['activity_id' => $item['activity_id']])->value('cate_id');
                }
            })->toArray();

            ReqResp::outputSuccess(handleApiReturn($data));
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 首页商品推荐
    public function getIndexRecommendProduct () {
        try {
            // $isShow = input('post.is_show', null);
            $number = input('post.number', 2);
            $where = cateBaseWhere(null, false);

            /*if ($isShow) {
                $where['cate_is_show'] = $isShow;
            }*/
            // TODO 查询首页显示的分类
            // TODO 每个商品取sort前两个
            // 查询显示且未删除的分类及图标
            $data = app()->model('common/Cate')
                ->field([
                    'cate_id', 'cate_title', 'cate_icon'
                ])->append([
                    'cate_icon_url',
                ])->where($where)->order([
                    'cate_sort' => 'desc',
                    'cate_create_time' => 'desc'
                ])->select()->each(function ($item) use ($number) {
                    $item['product_info'] = app()->model('common/Product')->field([
                        'product_title', 'product_code', 'product_price', 'product_cover_img'
                    ])->append([
                        'product_cover_img_url'
                    ])->where(array_merge(productBaseWhere('', false), [
                        'cate_id' => $item['cate_id'],
                    ]))->order([
                        'product_sort' => 'desc'
                    ])->limit($number)->select()->toArray();

                    return $item;
                })->toArray();

            ReqResp::outputSuccess(handleApiReturn($data));
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 首页搜索
    public function indexSearch () {
        try {
            list($pageNum, $pageSize) = getPageParams();
            $search = input('search', null);
            if (!$search) {
                throw new \Exception('请输入您想购买的商品名称、特点', ErrorCode::PARAMS_ERROR);
            }
            $cateId = input('cate_id', null);

            $where = array_merge(cateBaseWhere('cate', false), productBaseWhere('pro', false));

            if ($cateId) {
                $where['cate.cate_id'] = $cateId;
            }

            $searchArr = explode(' ', $search);
            // 查询商品标签
            $tagList = app()->model('common/Product')::getTagList();
            $tagList = array_map(function ($v) {
                return array_filter(explode(',', $v));
            }, $tagList);
            // 查询商品标题
            $titleList = app()->model('common/Product')::getTitleList();

            $searchCode = [];
            foreach ($searchArr as $searchKey) {
                foreach ($tagList as $tagKey => $tag) {
                    foreach ($tag as $kegV) {
                        if (strlen($searchKey) > strlen($kegV)) {
                            if (false !== stripos($searchKey, $kegV)) {
                                $searchCode[] = $tagKey;
                                break;
                            }
                        } else {
                            if (false !== stripos($kegV, $searchKey)) {
                                $searchCode[] = $tagKey;
                                break;
                            }
                        }
                    }
                }
                foreach ($titleList as $titleKey => $title) {
                    if (strlen($searchKey) > strlen($title)) {
                        if (false !== stripos($searchKey, $title)) {
                            $searchCode[] = $titleKey;
                        }
                    } else {
                        if (false !== stripos($title, $searchKey)) {
                            $searchCode[] = $titleKey;
                        }
                    }
                }
            }

            $where['pro.product_id'] = array_unique($searchCode);
            // 查询商品
            $sql = app()->model('common/Product')->alias('pro')->field([
                'product_title', 'product_code', 'product_price', 'product_cover_img'
            ])->append(['product_cover_img_url'])->where($where)->join([
                ['cate cate', 'pro.cate_id = cate.cate_id'],
            ])->buildSql();

            $productList = app()->model('common/Product')->table($sql)->alias('query')->paginate($pageSize, false, [
                'page' => $pageNum
            ])->toArray();

            // dump(app()->model('common/Product')->getLastSql());die;
            ReqResp::outputSuccess(handleApiReturn($productList));
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 获取签名
    public function getJsSign () {
        try {
            $url = input('share_url', null);
            if (!$url) {
                $url = url('/', [], '', true);
            }

            $jsApp = WeChat::weChatInit()->jssdk;
            $jsApp->setUrl($url);
            $jsSign = $jsApp->buildConfig([], false, false, false);
            ReqResp::outputSuccess($jsSign);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
}