<?php
/**
 * User: 周星
 * Date: 2019/10/10
 * Time: 10:55
 * Email: zhouxing@benbang.com
 */

namespace app\api\controller;

use think\Db;
use util\ErrorCode;
use util\ReqResp;

class Address extends Base {

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function getUserAddressList () {
        try {
            $uid = $this->getUserId();

            list($pageNum, $pageSize) = getPageParams();

            $where = [
                'user_id' => $uid,
                'address_is_delete' => config('un_deleted'),
                'address_status' => config('address_status_succ')
            ];
            $appends = [
                'address_default_title',
                'address_perfect_title'
            ];
            $data = app()->model('common/Address')->field([
                'address_id', 'address_addressee', 'address_mobile', 'address_province_name',
                'address_city_name', 'address_district_name', 'address_detailed', 'address_is_default',
                'address_is_perfect', 'address_create_time'
            ])->where($where)->append($appends)->order(['address_is_default' => 'DESC', 'address_id' => 'DESC'])->paginate($pageSize, false, [
                'page' => $pageNum
            ])->each(function ($item) {
                return $item;
            })->toArray();

            ReqResp::outputSuccess(handleApiReturn($data));
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    public function changeAddressDefault () {
        try {
            $uid = $this->getUserId();
            $addressId = input('address_id', null);
            if (!$addressId) {
                throw new \Exception('地址不存在', ErrorCode::PARAMS_ERROR);
            }
            $addressInfo = app()->model('common/Address')->where([
                'address_id' => $addressId,
                'user_id' => $uid,
                'address_is_delete' => config('un_deleted'),
                'address_status' => config('address_status_succ')
            ])->find();
            if (!$addressInfo) {
                throw new \Exception('地址不存在', ErrorCode::NO_DATA);
            }

            $msg = '设为默认';
            Db::startTrans();
            // 将当前用户其他地址取消默认
            app()->model('common/Address')::where(['user_id' => $uid,])->setField('address_is_default', config('address_not_default'));
            $res = app()->model('common/Address')->where(['address_id' => $addressId])->setField('address_is_default', config('address_defaulted'));
            /*if (false === $res) {
                $msg = '取消默认';
                $res = app()->model('common/Address')->where(['address_id' => $addressId])->setField('address_is_default', config('address_not_default'));
            }*/
            if (false === $res) {
                Db::rollback();
                throw new \Exception($msg . '失败', ErrorCode::ACTION_FAILED);
            }
            Db::commit();

            ReqResp::outputSuccess([], $msg . '成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    public function delAddress () {
        try {
            $uid = $this->getUserId();
            $addressId = input('address_id', null);
            if (!$addressId) {
                throw new \Exception('地址不存在', ErrorCode::PARAMS_ERROR);
            }
            $addressInfo = app()->model('common/Address')->where([
                'address_id' => $addressId,
                'user_id' => $uid,
                'address_status' => config('address_status_succ')
            ])->setField([
                'address_is_delete' => config('deleted'),
                'address_is_default' => config('address_not_default')
            ]);
            if (!$addressInfo) {
                throw new \Exception('删除失败', ErrorCode::DELETE_FAILED);
            }

            ReqResp::outputSuccess([], '删除成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    public function saveAddress () {
        try {
            $uid = $this->getUserId();
            $params = input('post.', null);
            if (!$params) {
                throw new \Exception('参数错误', ErrorCode::PARAMS_ERROR);
            }

            $where = [];
            $params['user_id'] = $uid;
            if (isset($params['address_id']) && $params['address_id']) {
                $where = [
                    'address_id' => $params['address_id'],
                    'user_id' => $uid,
                ];
            } else {
                unset($params['address_id']);
            }

            // 数据验证
            $result = $this->validate($params, 'common/Address');
            if (true !== $result) {
                throw new \Exception($result, ErrorCode::SUBMIT_PARAMS_VALIDATE_ERROR);
            }

            $res = app()->model('common/Address')->allowField(true)->save($params, $where);
            if ($res) {
                ReqResp::outputSuccess(['address_id' => app()->model('common/Address')->address_id], '提交成功');
            }

            throw new \Exception('提交失败', ErrorCode::UPDATE_FAILED);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    public function getAddressInfo () {
        try {
            $uid = $this->getUserId();
            $addressId = input('address_id', null);
            if (!$addressId) {
                throw new \Exception('地址信息不存在', ErrorCode::PARAMS_ERROR);
            }

            $where = [
                'address_id' =>$addressId,
                'user_id' => $uid,
            ];

            $data = app()->model('common/Address')->field([
                'address_addressee',
                'address_mobile',
                'address_detailed',
                'address_province_name',
                'address_city_name',
                'address_district_name',
            ])->where($where)->find();

            if (!$data) {
                throw new \Exception('地址查询失败', ErrorCode::NO_DATA);
            }

            ReqResp::outputSuccess($data, '获取成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
}