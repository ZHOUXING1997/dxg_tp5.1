<?php
/**
 * User: 周星
 * Date: 2019/6/21
 * Time: 16:13
 * Email: zhouxing@benbang.com
 */

namespace app\api\controller;

use util\ErrorCode;
use util\Pay;
use util\ReqResp;

// 购物车
class ShopCart extends Base {
    
    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    // 购物车列表
    public function getUserShopCart () {
        try {
            $uid = $this->userId;
            list($pageNum, $pageSize) = getPageParams();

            $where = array_merge([['cart.user_id', '=', $uid],
                ['cart.shop_cart_is_delete', '=', config('un_deleted')],
            ], cateBaseWhere('cate'), productBaseWhere('pro'));

            $field = array_merge(handleField([
                'shop_cart_id', 'product_code', 'product_num', 'shop_cart_add_time', 'product_attr_code',
            ], 'cart'), handleField([
                'product_title', 'cate_id', 'product_cover_img', 'product_price', 'product_attribute',
            ], 'pro'), handleField([
                'cate_title', 'cate_icon',
            ], 'cate'));

            $join = [
                ['products pro', 'cart.product_id = pro.product_id'],
                ['cate cate', 'pro.cate_id = cate.cate_id'],
            ];

            $data = app()
                ->model('common/ShopCart')
                ->alias('cart')
                ->field($field)
                ->where($where)
                ->join($join)
                ->paginate($pageSize, false, [
                    'page' => $pageNum,
                ])->each(function ($item) {
                    $attribute = '';
                    foreach ($item['product_attribute'] as $attr) {
                        if ($attr['attr_code'] == $item['product_attr_code']) {
                            $attr['attr_price'] = Pay::drawMoneyChange($attr['attr_price']);
                            $attribute = $attr;
                            break;
                        }
                    }
                    $item['product_attribute'] = $attribute;
                    return $item;
                })->toArray();

            // if (!$data) {
            //     throw new \Exception('无数据', ErrorCode::NO_DATA);
            // }

            ReqResp::outputSuccess(handleApiReturn($data));
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
    
    // 加入购物车
    public function addShoppingCart () {
        try {
            $wareNo = input('post.product_code', null);
            $wareNum = input('post.number', 1);
            $attrCode = input('post.product_attr_code', null);
            if (!$wareNo) {
                throw new \Exception('请选择商品', ErrorCode::PARAMS_ERROR);
            }
            if (!$attrCode) {
                throw new \Exception('请选择具体的类型', ErrorCode::PARAMS_ERROR);
            }
            // 查询商品码是否一致
            $proInfo = app()->model('common/Product')->field([
                'product_id', 'product_attribute'
            ])->where(array_merge(['product_code' => $wareNo], productBaseWhere(null, false)))->find();
            if (!$proInfo) {
                throw new \Exception('商品不存在或已下架', ErrorCode::NO_DATA);
            }

            // 提取对应的商品属性
            $productAttribute = $proInfo['product_attribute'];
            $attribute = '';
            foreach ($productAttribute as $attr) {
                if ($attr['attr_code'] == $attrCode) {
                    $attribute = $attr;
                    break;
                }
            }
            if (!$attribute) {
                throw new \Exception('商品类型不存在，请确定是否选择', ErrorCode::PARAMS_ERROR);
            }

            // 查询当前商品是否已存在与购物车
            $shopCartId = app()->model('common/ShopCart')->where([
                'user_id' => $this->userId,
                'product_code' => $wareNo,
                'product_attr_code' => $attrCode,
                'shop_cart_is_delete' => config('un_deleted')
            ])->value('shop_cart_id');

            if ($shopCartId) {
                $res = app()->model('common/ShopCart')::where([
                    'shop_cart_id' => $shopCartId
                ])->inc('product_num', $wareNum)->setField([
                    'product_attribute' => $attribute,
                    'shop_cart_add_time' => time()
                ]);
            } else {
                $insertData  = [
                    'user_id' => $this->userId,
                    'product_id' => $proInfo['product_id'],
                    'product_code' => $wareNo,
                    'product_num' => $wareNum,
                    'product_attribute' => $attribute,
                    'product_attr_code' => $attrCode,
                    'shop_cart_add_time' => time(),
                ];
                $res = app()->model('common/ShopCart')->field(true)->insert($insertData);
            }

            if ($res) {
                ReqResp::outputSuccess([], '添加成功');
            }
            throw new \Exception('添加失败，请稍后再试', ErrorCode::ACTION_FAILED);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
    
    // 删除购物车
    public function delShoppingCart () {
        try {
            $carId = input('shop_cart_id/a', null);
            if (empty($carId)) {
                throw new \Exception('购物车不存在', ErrorCode::PARAMS_ERROR);
            }
            if (app()->model('common/ShopCart')->whereIn('shop_cart_id', $carId)->setField('shop_cart_is_delete', config('deleted'))) {
                ReqResp::outputSuccess([], '删除成功');
            }
            throw new \Exception('删除失败', ErrorCode::DELETE_FAILED);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 增加/减少 数量
    public function changeShoppingNum () {
        try {
            $type = input('post.change_type/d', null);
            $carId = input('post.shop_cart_id/d', null);
            $number = abs(input('post.number/d', 1));

            if (!$carId) {
                throw new \Exception('购物车不存在', ErrorCode::PARAMS_ERROR);
            }
            $carNum = app()->model('common/ShopCart')->where(['shop_cart_id' => $carId])->value('product_num');
            if (!$carNum || $carNum < 1) {
                throw new \Exception('购物车不存在', ErrorCode::PARAMS_ERROR);
            }
            $action = 'setInc';
            if ($type) {
                if ($type === 1) {
                    $action = 'setInc';
                    $msg = '添加';
                } else if ($type === 2) {
                    if ($carNum < $number) {
                        throw new \Exception('减少失败，减少数量大于当前数量', ErrorCode::UPDATE_FAILED);
                    }
                    $action = 'setDec';
                    $msg = '减少';
                }
            } else {
                $action = 'setField';
                $msg = '操作';
            }
            if (false === app()->model('common/ShopCart')->where(['shop_cart_id' => $carId])->$action('product_num', $number)) {
		throw new \Exception($msg . '失败', ErrorCode::UPDATE_FAILED);
            }
	    
	    ReqResp::outputSuccess([], $msg . '成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
}
