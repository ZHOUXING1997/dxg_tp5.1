<?php
/**
 * User: 周星
 * Date: 2019/10/23
 * Time: 14:11
 * Email: zhouxing@benbang.com
 */

namespace app\TimingTask\controller;

use think\Controller;

// 订单定时任务
class Order extends TimingBase {

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    // 检测订单超时
    public function orderExpires () {
        // TODO 订单超时监控
        // TODO 每分钟一次
        // TODO 状态为未支付，main_order_expires 超过当前时间
        set_time_limit(0);
        $where = [
            ['main_order_status', '=', config('main_order_unpaid')],
            ['main_order_is_delete', '=', config('un_deleted')],
            ['main_order_expires', 'elt', time()],
        ];

        // 查询要关闭的订单id
        $mainOrderId = app()->model('common/MainOrder')->where($where)->column('main_order_id');
        if (empty($mainOrderId)) {
            trace('[Timing:Order => timingStop] : no data，没有需要执行关闭的订单', 'error');
            if ($this->is_cli()) {
                return '没有数据或执行失败';
            }

            die('没有数据或执行失败');
        }

        $num = app()->model('common/MainOrder')
            ->whereIn('main_order_id', $mainOrderId)
            ->setField([
                'main_order_status' => config('main_order_out_time'),
                'main_order_pay_status' => config('pay_status_unpay')
            ]);
        if (empty($num)) {
            trace('[Timing:Order => timingStop] : no data，订单关闭失败，订单id [' . implode(',', $mainOrderId) .']', 'error');
            if ($this->is_cli()) {
                return '没有数据或执行失败';
            }
            die('没有数据或执行失败');
        }

        // 恢复相对应的库存
        $subData = app()->model('common/MainOrder')->alias('main')
            ->whereIn('main_order_id', $mainOrderId)->field([
                'sub.product_code', 'sub.product_num'
            ])->join([
                ['sub_order sub', 'main.main_order_no = sub.main_order_no'],
            ])->select()->toArray();
        foreach ($subData as $product) {
            if (!app()->model('common/Product')::incStock($product['product_code'], $product['product_num'])) {
                trace('[Timing:Order => timingStop] : 商品库存恢复失败， data：' . json_encode($product), 'error');
            }
        }

        trace('[Timing:Order => timingStop] : success num :' . $num, 'error');
        if ($this->is_cli()) {
            return '执行完成';
        }
        die('执行完成');
    }
    
    // 自动收货
    public function orderAutomaticReceipt () {
        // TODO 订单自动收货
        // TODO 每10分钟一次
        // TODO 状态为已发货，已支付，未删除，已发货时间超过N天
        set_time_limit(0);
        $deliveryTime = getAppletConfig('main_order_automatic_receipt', 7);
        $where = [
            ['main_order_is_delete', '=', config('un_deleted')],
            ['main_order_status', '!=', config('main_order_delivered')] ,
            ['main_order_pay_status', '!=', config('pay_status_succ')] ,
            ['main_order_delivery_time', '<', time() - (3600 * 24 * $deliveryTime)],
        ];

        // 查询要关闭的订单id
        $mainOrderNo = app()->model('common/MainOrder')->where($where)->column('main_order_id');
        if (empty($mainOrderNo)) {
            trace('[Timing:Order => orderAutomaticReceipt] : no data，没有需要执行关闭的订单', 'error');
            if ($this->is_cli()) {
                return '没有数据或执行失败';
            }

            die('没有数据或执行失败');
        }

        // 修改订单状态
        $num = app()->model('common/MainOrder')->alias('main')->whereIn('main.main_order_no', $mainOrderNo)->join([
            ['sub_order sub', 'main.main_order_no = sub.main_order_no'],
        ])->setField([
            'main.main_order_status' => config('main_order_complete'),
            'main.main_order_receipt_time' => time(),
            'sub.sub_order_status' => config('sub_order_receipted')
        ]);

        trace('[Timing:Order => orderAutomaticReceipt] : success num :' . $num, 'error');
        if ($this->is_cli()) {
            return '执行完成';
        }
        die('执行完成');
    }
}