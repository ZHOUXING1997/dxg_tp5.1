<?php
/**
 * User: 周星
 * Date: 2019/10/22
 * Time: 18:09
 * Email: zhouxing@benbang.com
 */

namespace app\TimingTask\controller;

// 返利
use think\Db;

class Rebate extends TimingBase {

    const STATUS_NOT_REBATE = 0; // 未返利(num超过三次为失败)
    const STATUS_REBATE_ING = 1; // 返利中
    const STATUS_REBATE_SUCC = 2; // 返利成功
    const STATUS_REBATE_FAIL = 3; // 返利失败
    const STATUS_REBATE_ERROR = 4; // 返利异常

    const QUEUE_REBATE_RETRY_MAX = 3; // 最大重试时间

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function queueRebate () {
        // TODO 每分钟一次
        // TODO 订单付款多长时间后去执行
        set_time_limit(0);
        $where = [
            ['queue_rebate_status', '=', self::STATUS_NOT_REBATE],
            ['queue_rebate_num', 'lt', self::QUEUE_REBATE_RETRY_MAX],
        ];
        $data = app()->model('common/QueueRebate')->where($where)->limit(10)->column('main_order_no,queue_rebate_num', 'queue_rebate_id');
        if (empty($data)) {
            trace('[Timing:Rebate => queueRebate] : no data', 'error');
            if ($this->is_cli()) {
                return '没有数据';
            }
            die('没有数据');
        }

        // 数据占用，改为启动中
        app()->model('common/QueueRebate')->whereIn('queue_rebate_id', array_keys($data))->setField('queue_rebate_status', self::STATUS_REBATE_ING);

        $num = 0;
        foreach ($data as $qid => $v) {
            // 判断订单是否已完成或已关闭
            $mainOrderStatus = app()->model('common/MainOrder')::where(['main_order_no' => $v['main_order_no']])->value('main_order_status');
            if ($mainOrderStatus !== config('main_order_complete') && $mainOrderStatus !== config('main_order_close')) {
                app()->model('common/QueueRebate')::where(['queue_rebate_id' => $v['queue_rebate_id']])->setField(['queue_rebate_status' => self::STATUS_NOT_REBATE, 'queue_rebate_remark' => '订单未完成']);
                continue;
            }

            Db::startTrans();
            // 返利信息
            $res = $this->rebate($v['main_order_no']);
            if (true === $res) {
                // 成功
                app()->model('common/QueueRebate')::where(['queue_rebate_id' => $v['queue_rebate_id']])->inc('queue_rebate_num')->setField(['queue_rebate_status' => self::STATUS_REBATE_SUCC, 'queue_rebate_remark' => '返利成功']);
                Db::commit();
                $num ++;
                continue;
            }
            if (false === $res) {
                // 失败
                Db::rollback();
                // 错误次数+1
                app()->model('common/QueueRebate')::where(['queue_rebate_id' => $v['queue_rebate_id']])->inc('queue_rebate_num')->setField('queue_rebate_status', $v['queue_rebate_num'] < 2 ? self::STATUS_NOT_REBATE : self::STATUS_REBATE_FAIL);
                continue;
            }
            // 存在异常
            Db::rollback();
            app()->model('common/QueueRebate')::where([
                'queue_rebate_id' => $v['queue_rebate_id']
            ])->update([
                'queue_rebate_status' => self::STATUS_REBATE_ERROR,
                'queue_rebate_remark' => $res,
            ]);
            continue;
        }
        trace('[Timing:Rebate => queueRebate] : success num :' . $num, 'error');
        if ($this->is_cli()) {
            return '执行完成';
        }
        die('执行完成');
    }

    private function rebate ($mainOrderNo) {
        $subOrderInfo = app()->model('common/SubOrder')->alias('sub')->field([
            'sub_order_payment', 'cate_rebate_rate', 'user_id'
        ])->where(['main_order_no' => $mainOrderNo])->select()->toArray();

        $userId = '';
        $commissionFeeArr = [0];
        foreach ($subOrderInfo as $sub) {
            if (!$userId) {
                $userId = $sub['user_id'];
            }
            if ($sub['cate_rebate_rate'] > 0) {
                if ($sub['cate_rebate_rate'] > 30) {
                    return '返利比例太大，存在异常。';
                }
                $commissionFeeArr[] = $sub['sub_order_payment'] * $sub['cate_rebate_rate'];
            }
        }
        // 查询购买人信息
        $payUser = app()->model('common/User')::where(['user_id' => $userId])->find();
        if (!$payUser) {
            return '购买人信息异常';
        }

        // 查询受返利人是否存在
        // 如果没有邀请者，不返利
        $superiorUserId = app()->model('common/User')::where(['user_id' => $payUser['user_superior_id']])->value('user_id');
        if (!$superiorUserId) {
            return '没有受返利人';
        }

        // 购买人与受返利不能为同一人
        if ($userId == $superiorUserId) {
            return '返利人与受返利人相同';
        }

        $commissionFee = floor(array_sum($commissionFeeArr));
        // 如果返利金额小于1，则不添加记录
        if ($commissionFee < 1) {
            return '返利金额过低';
        }

        // 添加返利记录
        $userRebateRecordData = [
            'user_id' => $userId,
            'rebate_user_id' => $superiorUserId,
            'rebate_time' => time(),
            'rebate_money' => $commissionFee,
            'before_commission_fee' => $payUser['user_commission_fee'],
            'main_order_no' => $mainOrderNo,
        ];

        // 更新用户 user_commission_fee 佣金金额
        $res = app()->model('common/User')::where(['user_id' => $superiorUserId])->setInc('user_commission_fee', $commissionFee);
        if ($res && app()->model('common/UserRebateRecord')->insert($userRebateRecordData)) {
            return true;
        }
        return false;
    }
}