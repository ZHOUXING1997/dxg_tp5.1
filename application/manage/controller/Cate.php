<?php
/**
 * User: 周星
 * Date: 2019/4/17
 * Time: 9:50
 * Email: zhouxing@benbang.com
 */

namespace app\manage\controller;

use app\common\controller\AdminBase;
use think\Db;
use util\ErrorCode;
use util\Pay;
use util\ReqResp;

// 分类管理
class Cate extends AdminBase {

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    // 首页
    public function index () {
        $this->assign([
            'showStatus' => config('show_status_title'),
        ]);

        return $this->fetch();
    }

    // 列表数据
    public function getList () {
        try {
            // 参数
            $nextOffset = input('page/d', 0);
            $pageSize = input('limit/d', config('page_size'));
            $search = $this->search();
            $where = array_merge($search['where'], [
                ['cate_is_delete', '=', config('un_deleted')],
            ]);

            $join = [];
            $field = [
                'cate_id',
                'cate_title',
                'cate_description',
                'cate_sort',
                'cate_is_show',
                'cate_icon',
                'cate_is_delete',
                'cate_create_time',
            ];
            $group = [];
            $order = [
                'cate_sort' => 'desc',
                'cate_create_time' => 'desc',
            ];
            $appends = [
                'cate_icon_url', 'cate_is_show_title', 'cate_description_preview'
            ];

            $data = app()->model('commonModel')->getList([
                'table' => \app\common\model\Cate::class,
                'pk' => 'cate_id',
                'as' => 'cate',
            ], $field, $nextOffset, $pageSize, true, function (&$item) {
                $item['product_num'] = app()->model('common/Product')::where(['cate_id' => $item['cate_id'], 'product_is_delete' => config('un_deleted')])->count();
                return $item;
            }, $where, $search['whereOr'], $join, $order, $group, $appends)->toArray();

            $req = [
                'total' => $data['total'],
                'data' => $data['data'],
            ];
            ReqResp::outputSuccess($req);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    public function viewEdit () {
        try {
            $params = input('post.', null);
            if (!$params) {
                throw new \Exception('无修改', ErrorCode::PARAMS_ERROR);
            }

            $rule = [
                'cate_sort' => ['cate_sort|排序' => 'require|number|between:1,99999'],
                'cate_title' => ['cate_title|分类名称' => 'require|length:2,6|unique:cate'],
            ];
            $checkRule = [];
            foreach ($params as $k => $v) {
                if (isset($rule[$k])) {
                    $checkRule = $rule[$k];
                }
            }
            // 数据验证
            $result = $this->validate($params,$checkRule);
            if(true !== $result){
                throw new \Exception($result, ErrorCode::SUBMIT_PARAMS_VALIDATE_ERROR);
            }
            $res = app()->model('Cate')->allowField(true)->save($params, ['cate_id' => $params['cate_id']]);
            if ($res) {
                ReqResp::outputSuccess([], '修改成功');
            }
            throw new \Exception('修改失败');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 删除
    public function del () {
        try {
            // 参数
            $id = input('cate_id', null);
            if (!$id) {
                throw new \Exception('无法删除', ErrorCode::PARAMS_ERROR);
            }
            // 查找当前分类下是否有商品
            $isSet = app()->model('Product')->where([
                'cate_id' => $id,
                // 'product_on_sale' => config('on_sale'),
                'product_is_delete' => config('un_deleted'),
            ])->count('cate_id');
            if ($isSet > 1) {
                throw new \Exception('当前分类下有商品，无法删除', ErrorCode::DELETE_FAILED);
            }
            $res = app()->model('common/Cate')->where(['cate_id' => $id])->setField('cate_is_delete', config('deleted'));
            if (false === $res) {
                throw new \Exception('删除失败', ErrorCode::DELETE_FAILED);
            }
            ReqResp::outputSuccess([], '删除成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 添加/编辑页
    public function save () {
        $id = input('cate_id', -1);
        if ($id < 1) {
            $data = null;
        } else {
            $data = app()->model('common/Cate')->where(['cate_id' => $id])->append(['cate_icon_url'])->find();
        }
        
        $this->assign([
            'cateId' => $id,
            'data' => urlencode(json_encode($data))
        ]);

        return $this->fetch();
    }

    // 添加/编辑提交
    public function doSave () {
        try {
            $params = input('post.', null);
            if (!$params) {
                throw new \Exception('请填写内容', ErrorCode::PARAMS_ERROR);
            }
            $where = [];
            if (isset($params['cate_id']) && $params['cate_id'] != -1) {
                $where = [
                    'cate_id' => $params['cate_id'],
                ];
            } else {
                unset($params['cate_id']);
            }
            
            // 数据验证
            $result = $this->validate($params,'common/Cate');
            if(true !== $result){
                throw new \Exception($result, ErrorCode::SUBMIT_PARAMS_VALIDATE_ERROR);
            }

            $res = app()->model('Cate')->allowField(true)->save($params, $where);
            if ($res) {
                ReqResp::outputSuccess([], '提交成功');
            }
            
            throw new \Exception('提交失败', ErrorCode::ACTION_FAILED);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 更改状态
    public function changeStatus () {
        try {
            $id = input('cate_id', null);
            if (!$id) {
                throw new \Exception('操作失败', ErrorCode::PARAMS_ERROR);
            }

            $res = app()->model('common/Cate')->where(['cate_id' => $id])->setField('cate_is_show', config('show_status_display'));
            if (!$res) {
                $res = app()->model('common/Cate')->where(['cate_id' => $id])->setField('cate_is_show', config('show_status_hide'));
            }
            if (!$res) {
                throw new \Exception('操作失败', ErrorCode::ACTION_FAILED);
            }
            ReqResp::outputSuccess([], '操作成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 查询方法
    protected function search () {
        $search = input('search', null);
        $startTime = input('start', '');
        $endtime = input('end', '');

        $isShow = input('cate_is_show', -1);

        $where = [];
        $whereOr = [];
        $formget = [];
        if ($search) {
            $where[] = ['cate.cate_title', 'like','%' . $search . '%'];
            $formget['search'] = $search;
        } else {
            $formget['search'] = '';
        }

        if (-1 != $isShow) {
            $where[] = ['cate.cate_is_show', '=', $isShow];
        }
        $formget['cate_is_show'] = $isShow;


        if (!empty($startTime)) {
            $where[] = ['cate.cate_create_time', '>',$startTime];
            $formget['start_time'] = $startTime;
        } else {
            $formget['start_time'] = '';
        }
        if (!empty($endtime)) {
            $where[] = ['cate.cate_create_time', '<',$endtime];
            $formget['end_time'] = $endtime;
        } else {
            $formget['end_time'] = '';
        }
        if (!empty($startTime) && !empty($endtime)) {
            if ($startTime < $endtime) {
                $where[] = ['cate.cate_create_time','between',[$startTime,$endtime]];
            } else {
                $where[] = ['cate.cate_create_time','between',[$endtime,$startTime]];
            }
        }

        $search = [
            'where' => $where,
            'whereOr' => $whereOr,
            'formget' => $formget,
        ];
        return $search;
    }
}