<?php
/**
 * User: 周星
 * Date: 2019/4/25
 * Time: 10:06
 * Email: zhouxing@benbang.com
 */

namespace app\manage\controller;

use app\common\controller\AdminBase;
use think\Db;
use think\facade\Validate;
use util\ErrorCode;
use util\ReqResp;

// 地址管理
class Address extends AdminBase {

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index () {

        return $this->fetch();
    }

    public function getList () {
        try {
            // 参数
            $nextOffset = input('page/d', 0);
            $pageSize = input('limit/d', config('page_size'));
            $search = $this->search();
            $where = array_merge($search['where'], [
                ['address_is_delete', '=', config('un_deleted')],
            ]);

            $appends = [
                'address_default_title',
                'address_perfect_title',
                'address_status_title',
            ];
            $join = [
                ['user ui', 'address.user_id = ui.user_id'],
            ];
            $field = [
                'address_id',
                'user_id',
                'address_addressee',
                'address_mobile',
                'address_province',
                'address_province_name',
                'address_city',
                'address_city_name',
                'address_district',
                'address_district_name',
                'address_detailed',
                'address_status',
                'address_is_default',
                'address_is_perfect',
                'address_create_time',
                Db::raw('CONCAT(address_province_name,address_city_name,address_district_name) as address'),
                'ui.user_nickname',
            ];
            $group = [];
            $order = [
                'address_create_time' => 'desc',
            ];

            $data = app()->model('commonModel')->getList([
                'table' => \app\common\model\Address::class,
                'pk' => 'address_id',
                'as' => 'address',
            ], $field, $nextOffset, $pageSize, true, function (&$item) {
                return $item;
            }, $where, $search['whereOr'], $join, $order, [], $appends)->toArray();

            $req = [
                'total' => $data['total'],
                'data' => $data['data'],
            ];
            ReqResp::outputSuccess($req);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    public function addressInfo () {
        $id = input('address_id', null);
        if (!$id) {
            throw new \Exception('参数错误', ErrorCode::PARAMS_ERROR);
        }
        $appends = [
            'address_default_title',
            'address_perfect_title',
            'address_status_title',
        ];
        $where = [
            'address.address_id' => $id,
        ];
        $join = [
            ['user ui', 'address.user_id = ui.user_id'],
        ];
        $field = [
            'address_id',
            'user_id',
            'address_addressee',
            'address_mobile',
            'address_province',
            'address_province_name',
            'address_city',
            'address_city_name',
            'address_district',
            'address_district_name',
            'address_detailed',
            'address_status',
            'address_is_default',
            'address_is_perfect',
            'address_create_time',
            'ui.user_nickname',
        ];
        $group = [];
        $order = [
            'address_create_time' => 'desc',
        ];

        $data = app()->model('commonModel')->getList([
            'table' => \app\common\model\Address::class,
            'pk' => 'address_id',
            'as' => 'address',
        ], $field, 1, 1, false, function (&$item) {
            return $item;
        }, $where, [], $join, $order, [], $appends)->toArray();

        if (empty($data)) {
            throw new \Exception('没有数据', ErrorCode::NO_DATA);
        }

        $this->assign([
            'addressId' => $id,
            'data' => urlencode(json_encode(reset($data)))
        ]);
        return $this->fetch();
    }

    // 页面编辑
    public function viewEdit () {
        try {
            $params = input('post.', null);
            if (!$params) {
                throw new \Exception('无修改', ErrorCode::PARAMS_ERROR);
            }

            $rule = [
                'address_addressee' => ['addressee|收货人名称' => 'require|max:6'],
                'address_mobile' => ['mobile|收货人联系方式' => 'require|checkMobile'],
                'address_detailed' => ['address_detailed|详细地址' => 'require|max:30'],
            ];
            Validate::extend('checkCarded', function ($value) {
                $rule = '/^[1-9]\d{7}((0[1-9])|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$|^[1-9]\d{5}[1-9]\d{3}((0[1-9])|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X|x)$/';
                return preg_match($rule, $value) > 0;
            });

            $checkRule = [];
            foreach ($params as $k => $v) {
                if (isset($rule[$k])) {
                    $checkRule = $rule[$k];
                }
            }
            // 数据验证
            $result = Validate::make($checkRule);
            if(true !== $result->check($params)){
                throw new \Exception($result->getError(), ErrorCode::SUBMIT_PARAMS_VALIDATE_ERROR);
            }
            $res = app()->model('Address')->allowField(true)->save($params, ['address_id' => $params['address_id']]);
            if ($res) {
                ReqResp::outputSuccess([], '修改成功');
            }
            throw new \Exception('修改失败');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 删除
    public function del () {
        try {
            $id = input('address_id/a', []);
            if (!$id || count($id, true) < 1) {
                throw new \Exception('请选择要删除的地址', ErrorCode::PARAMS_ERROR);
            }
            if (count($id, true) > 1) {
                $where = [
                    ['address_id', 'in', $id]
                ];
            } else {
                $where = [
                    'address_id' => reset($id),
                ];
            }

            // 删除验证，没有订单未结束的商品,查出不能删除的地址
            // $notDeleteOrder = app()->model('MainOrder')->where($where)->whereNotIn('main_order_status', config('main_order_deletable_status'))->column('address_id');

            // 去重差集，找出可以删除的id
            $deleteProductId = array_diff($id, array_unique([]));

            if (empty($deleteProductId)) {
                throw new \Exception('需要没有订单使用的地址才可删除', ErrorCode::DELETE_FAILED);
            }

            $res = app()->model('Address')->whereIn('address_id', $deleteProductId)->setField('address_is_delete', config('deleted'));
            if (!$res) {
                throw new \Exception('删除失败', ErrorCode::DELETE_FAILED);
            }
            if ($res < count($id)) {
                throw new \Exception('部分删除成功', ErrorCode::DELETE_FAILED);
            }

            ReqResp::outputSuccess([], '删除成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 更改状态
    public function changeStatus () {
        try {
            $id = input('address_id', null);
            if (!$id) {
                throw new \Exception('操作失败', ErrorCode::PARAMS_ERROR);
            }

            $res = app()->model('common/Address')->where(['address_id' => $id])->setField('address_status', config('address_status_succ'));
            if (!$res) {
                $res = app()->model('common/Address')->where(['address_id' => $id])->setField('address_status', config('address_status_fail'));
            }
            if (!$res) {
                throw new \Exception('操作失败', ErrorCode::ACTION_FAILED);
            }
            ReqResp::outputSuccess([], '操作成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 查询方法
    protected function search () {
        $search = input('search', null);
        $startTime = input('start', '');
        $endtime = input('end', '');

        // $isShow = input('address_show_status', -1);

        $where = [];
        $whereOr = [];
        $formget = [];
        if ($search) {
            $where[] = ['address.address_title', 'like','%' . $search . '%'];
            $formget['search'] = $search;
        } else {
            $formget['search'] = '';
        }

        /*if (-1 != $isShow) {
            $where[] = ['address.address_show_status', '=', $isShow];
        }
        $formget['address_show_status'] = $isShow;*/


        if (!empty($startTime)) {
            $where[] = ['address.address_create_time', '>',$startTime];
            $formget['start_time'] = $startTime;
        } else {
            $formget['start_time'] = '';
        }
        if (!empty($endtime)) {
            $where[] = ['address.address_create_time', '<',$endtime];
            $formget['end_time'] = $endtime;
        } else {
            $formget['end_time'] = '';
        }
        if (!empty($startTime) && !empty($endtime)) {
            if ($startTime < $endtime) {
                $where[] = ['address.address_create_time','between',[$startTime,$endtime]];
            } else {
                $where[] = ['address.address_create_time','between',[$endtime,$startTime]];
            }
        }

        $search = [
            'where' => $where,
            'whereOr' => $whereOr,
            'formget' => $formget,
        ];
        return $search;
    }
}