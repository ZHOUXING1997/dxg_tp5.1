<?php

namespace app\manage\controller;

use app\common\controller\AdminBase;
use app\common\model\SubOrder;
use think\Db;
use util\ErrorCode;
use util\ReqResp;

// 商品 相关
class Product extends AdminBase {

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    // 首页
    public function index () {
        $this->assign([
            'exclusiveStatus' => config('vip_exclusive_title'),
            'productSale' => config('product_sale_title'),
            'cateLists' => app()->model('common/cate')->viewCate(),
        ]);
        
        return $this->fetch();
    }
    
    // 数据
    public function getList () {
        try {
            // 参数
            $nextOffset = input('page/d', 0);
            $pageSize = input('limit/d', config('page_size'));
            $search = $this->search();
            $where = array_merge($search['where'], [
                ['pro.product_is_delete', '=', config('un_deleted')],
                ['cate.cate_is_delete', '=', config('un_deleted')],
            ]);

            $join = [
                ['cate cate', 'pro.cate_id = cate.cate_id'],
            ];
            $field = [
                'product_id',
                'product_title',
                'product_code',
                'cate_id',
                'product_price',
                'product_cover_img',
                'product_description',
                'product_on_sale',
                'product_sort',
                'product_is_vip_exclusive',
                'product_sales',
                'product_stock',
                'product_detail_img',
                'product_create_time',
                'cate.cate_title',
            ];
            $group = [];
            $order = [
                'product_on_sale' => 'desc',
                'cate.cate_is_show' => 'desc',
                'product_sort' => 'desc',
                'product_create_time' => 'desc',
            ];
            $appends = [
                'product_cover_img_url', 'product_on_sale_title', 'product_vip_exclusive_title',
                'product_description_preview',
            ];
            $data = app()->model('commonModel')->getList([
                'table' => \app\common\model\Product::class,
                'pk' => 'product_id',
                'as' => 'pro',
            ], $field, $nextOffset, $pageSize, true, function (&$item) {

                return $item;
            }, $where, $search['whereOr'], $join, $order, $group, $appends)->toArray();

            $req = [
                'total' => $data['total'],
                'data' => $data['data'],
            ];
            ReqResp::outputSuccess($req);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 页面编辑
    public function viewEdit () {
        try {
            $params = input('post.', null);
            if (!$params) {
                throw new \Exception('无修改', ErrorCode::PARAMS_ERROR);
            }
            
            $rule = [
                // 'product_code' => ['product_code|商品货号' => 'require|alphaDash|length:1,20|unique:products'],
                'product_price' => ['product_price|价格'     => 'require|float|between:1,999999'],
                'product_sort' => ['product_sort|排序' => 'require|number|between:1,99999'],
            ];
            $checkRule = [];
            foreach ($params as $k => $v) {
                if (isset($rule[$k])) {
                    $checkRule = $rule[$k];
                }
            }
            // 数据验证
            $result = $this->validate($params,$checkRule);
            if(true !== $result){
                throw new \Exception($result, ErrorCode::SUBMIT_PARAMS_VALIDATE_ERROR);
            }

            $res = app()->model('Product')->allowField(true)->save($params, ['product_id' => $params['product_id']]);
            if ($res) {
                ReqResp::outputSuccess([], '修改成功');
            }
            throw new \Exception('修改失败');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    public function save () {
        $id = input('product_id', -1);
        if ($id < 1) {
            $data = null;
        } else {
            $data = app()->model('common/Product')->where(['product_id' => $id])->append(['product_cover_img_url', 'product_detail_img_url', 'product_detail_img_info', 'product_preview_img_url', 'product_preview_img_info'])->find();
        }

        $cateId = $data['cate_id'] ? $data['cate_id'] :[];

        $this->assign([
            'productId' => $id,
            'data' => $data,
            'attribute' => $data['product_attribute'] ? $data['product_attribute'] : [],
            'cateLists' => app()->model('common/cate')->viewCate($cateId),
            'curr_cid' => empty($data['cate_id']) ? '' : $data['cate_id'],
        ]);

        return $this->fetch();
    }

    // 保存信息
    public function doSave () {
        try {
            $params = input('post.', null);

            if (!$params) {
                throw new \Exception('请填写内容', ErrorCode::PARAMS_ERROR);
            }
            $where = [];
            if (isset($params['product_id']) && $params['product_id'] != -1) {
                $where = [
                    'product_id' => $params['product_id'],
                ];
            } else {
                unset($params['product_id']);
            }

            // 数据验证
            $result = $this->validate($params,'common/Product');
            if(true !== $result){
                throw new \Exception($result, ErrorCode::SUBMIT_PARAMS_VALIDATE_ERROR);
            }

            $res = app()->model('common/Product')->allowField(true)->save($params, $where);
            if ($res) {
                ReqResp::outputSuccess([], '提交成功');
            }

            throw new \Exception('提交失败', ErrorCode::ACTION_FAILED);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 删除
    public function del () {
        try {
            $id = input('product_id/a', []);
            if (!$id || count($id, true) < 1) {
                throw new \Exception('请选择要删除的订单', ErrorCode::PARAMS_ERROR);
            }
            
            if (count($id, true) > 1) {
                $where = [
                    ['product_id', 'in', $id]
                ];
            } else {
                $where = [
                    'product_id' => reset($id),
                ];
            }

            // 删除验证，没有订单未结束的商品,查出不能删除的商品
            $notDeleteOrder = app()->model('SubOrder')->where($where)->whereNotIn('sub_order_status', config('main_order_deletable_status'))->column('product_id');

            // 查询已上架商品
            $onSaleProduct = app()->model('common/Product')->where($where)->where(['product_on_sale' => config('on_sale')])->column('product_id');

            // 去重差集，找出可以删除的id
            $deleteProductId = array_diff($id, array_unique($notDeleteOrder), $onSaleProduct);
            if (empty($deleteProductId)) {
                throw new \Exception('需要商品已下架并且没有正在进行的订单才可删除', ErrorCode::DELETE_FAILED);
            }

            $res = app()->model('Product')->whereIn('product_id', $deleteProductId)->setField('product_is_delete', config('deleted'));
            if (!$res) {
                throw new \Exception('删除失败', ErrorCode::DELETE_FAILED);
            }
            // 删除tag 缓存
            foreach ($deleteProductId as $vid) {
                app()->model('common/Product')::delTagListCache($vid);
                app()->model('common/Product')::delTitleListCache($vid);
            }
            if ($res < count($id)) {
                throw new \Exception('部分删除成功', ErrorCode::DELETE_FAILED);
            }
            
            ReqResp::outputSuccess([], '删除成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 更改状态
    public function changeStatus () {
        try {
            $id = input('product_id', null);
            if (!$id) {
                throw new \Exception('操作失败', ErrorCode::PARAMS_ERROR);
            }

            $res = app()->model('common/Product')->where(['product_id' => $id])->setField('product_on_sale', config('on_sale'));
            if (!$res) {
                $res = app()->model('common/Product')->where(['product_id' => $id])->setField('product_on_sale', config('down_sale'));
                if (!$res) {
                    throw new \Exception('操作失败', ErrorCode::ACTION_FAILED);
                }
                // 删除tag 缓存
                app()->model('common/Product')::delTagListCache($id);
                app()->model('common/Product')::delTitleListCache($id);
            } else {
                // 增加tag 缓存
                $product = app()->model('common/Product')::where(['product_id' => $id])->field([
                    'product_tag', 'product_title'
                ])->find();

                app()->model('common/Product')::setTagListCache($id, $product['product_tag']);
                app()->model('common/Product')::setTitleListCache($id, $product['product_title']);
            }

            ReqResp::outputSuccess([], '操作成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 富文本版 详情
    public function productDetail () {
        return $this->fetch();
    }

    public function checkProductAttributeInOrder () {
        try {
            $productCode = input('product_code', null);
            $attrCode = input('attr_code', null);
            if (!$productCode || !$attrCode) {
                throw new \Exception('参数错误', ErrorCode::PARAMS_ERROR);
            }

            if (SubOrder::checkProductAttributeInOrder($productCode, $attrCode)) {
                throw new \Exception('当前属性存在未支付订单，不能删除', ErrorCode::DELETE_FAILED);
            }

            ReqResp::outputSuccess([], '删除成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 查询方法
    protected function search () {
        $search = input('search', null);
        $startTime = input('start', '');
        $endtime = input('end', '');

        $onSale = input('product_on_sale', -1);
        $vipExclusive = input('product_is_vip_exclusive', -1);
        $cateId = input('cate_id', -1);

        $where = [];
        $whereOr = [];
        $formget = [];
        if ($search) {
            $where[] = ['pro.product_title', 'like','%' . $search . '%'];
            $whereOr[] = ['pro.product_code', '=', $search];
            $formget['search'] = $search;
        } else {
            $formget['search'] = '';
        }

        if (-1 != $onSale) {
            $where[] = ['pro.product_on_sale', '=', $onSale];
        }
        $formget['product_on_sale'] = $onSale;

        if (-1 != $vipExclusive) {
            $where[] = ['pro.product_is_vip_exclusive', '=', $vipExclusive];
        }
        $formget['product_is_vip_exclusive'] = $vipExclusive;

        if (-1 != $cateId) {
            $where[] = ['pro.cate_id', '=', $cateId];
        }
        $formget['cate_id'] = $cateId;

        if (!empty($startTime)) {
            $where[] = ['pro.product_create_time', '>',$startTime];
            $formget['start_time'] = $startTime;
        } else {
            $formget['start_time'] = '';
        }
        if (!empty($endtime)) {
            $where[] = ['pro.product_create_time', '<',$endtime];
            $formget['end_time'] = $endtime;
        } else {
            $formget['end_time'] = '';
        }
        if (!empty($startTime) && !empty($endtime)) {
            if ($startTime < $endtime) {
                $where[] = ['pro.product_create_time','between',[$startTime,$endtime]];
            } else {
                $where[] = ['pro.create_time','between',[$endtime,$startTime]];
            }
        }

        $search = [
            'where' => $where,
            'whereOr' => $whereOr,
            'formget' => $formget,
        ];
        return $search;
    }
}
