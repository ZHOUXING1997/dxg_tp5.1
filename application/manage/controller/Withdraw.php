<?php
/**
 * User: 周星
 * Date: 2019/10/31
 * Time: 13:34
 * Email: zhouxing@benbang.com
 */

namespace app\manage\controller;

use app\common\controller\AdminBase;
use util\ErrorCode;
use util\ReqResp;

// 提现管理
class Withdraw extends AdminBase {

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index () {
        return $this->fetch();
    }

    public function getList () {
        try {
            // 参数
            $nextOffset = input('page/d', 0);
            $pageSize = input('limit/d', config('page_size'));
            $search = $this->search();

            $join = [
                ['user user', 'w.user_id = user.user_id'],
            ];
            $field = [
                'user.user_nickname',
                'user.user_avatar',
                'queue_withdraw_id',
                'queue_withdraw_money',
                'queue_withdraw_num',
                'queue_withdraw_status',
                'queue_withdraw_remark',
                'queue_withdraw_create_time',
            ];
            $group = [];
            $order = [
                'queue_withdraw_status' => 'asc',
                'queue_withdraw_id' => 'desc'
            ];
            $appends = [
                'queue_withdraw_status_title',
            ];

            $data = app()->model('commonModel')->getList([
                'table' => \app\common\model\QueueWithdraw::class,
                'pk' => 'queue_withdraw_id',
                'as' => 'w',
            ], $field, $nextOffset, $pageSize, true, function (&$item) {
                return $item;
            }, $search['where'], $search['whereOr'], $join, $order, $group, $appends)->toArray();

            $req = [
                'total' => $data['total'],
                'data' => $data['data'],
            ];
            ReqResp::outputSuccess($req);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 标记已打款
    public function markPayed () {
        try {
            $queueWithdrawId = input('queue_withdraw_id', null);
            if (!$queueWithdrawId) {
                throw new \Exception('请选择已打款提现记录', ErrorCode::PARAMS_ERROR);
            }
            // 更新状态
            $res = app()->model('common/QueueWithdraw')->alias('w')->where([
                'w.queue_withdraw_id' => $queueWithdrawId,
                'w.queue_withdraw_status' => config('queue_withdraw_status_not')
            ])->join([
                ['user_withdrawal_record uw', 'w.user_withdrawal_id = uw.user_withdrawal_id']
            ])->setField([
               'w.queue_withdraw_status' => config('queue_withdraw_status_succ'),
               'w.queue_withdraw_remark' => '后台确认打款',
               'uw.user_withdrawal_status' => config('user_withdrawal_status_succ'),
               'uw.user_withdrawal_inside_remark' => '后台确认打款'
            ]);
            if (!$res) {
                throw new \Exception('确认失败', ErrorCode::ACTION_FAILED);
            }

            ReqResp::outputSuccess([], '确认成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 查询方法
    protected function search () {
        // dump(input(''));die;

        $search = input('search', null);
        $startTime = input('start', '');
        $endtime = input('end', '');
        $where = [];
        $whereOr = [];
        $formget = [];
        if ($search) {
            $where[] = ['user_nickname', 'like','%' . $search . '%'];
            $formget['search'] = $search;
        } else {
            $formget['search'] = '';
        }

        /*if (!empty($startTime)) {
            // $start = strtotime($startTime);
            $where[] = ['user_create_time', '>',$startTime];
            $formget['start_time'] = $startTime;
        } else {
            $formget['start_time'] = '';
        }
        if (!empty($endtime)) {
            // $end = strtotime($endtime);
            $where[] = ['user_create_time', '<',$endtime];
            $formget['end_time'] = $endtime;
        } else {
            $formget['end_time'] = '';
        }
        if (!empty($startTime) && !empty($endtime)) {
            // $start = strtotime($startTime);
            // $end = strtotime($endtime);
            if ($startTime < $endtime) {
                $where[] = ['user_create_time','between',[$startTime,$endtime]];
            } else {
                $where[] = ['user_create_time','between',[$endtime,$startTime]];
            }
        }*/

        $search = [
            'where' => $where,
            'whereOr' => $whereOr,
            'formget' => $formget,
        ];
        return $search;
    }
}