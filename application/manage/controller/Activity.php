<?php

namespace app\manage\controller;

use app\common\controller\AdminBase;
use think\Db;
use util\ErrorCode;
use util\ReqResp;

class Activity extends AdminBase {

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    // 首页
    public function index () {
        $this->assign([
            'activityStatus' => config('activity_status_title'),
            'activityType' => config('activity_type_title'),
            'activity_self_start_status' => config('activity_self_start_status_title'),
        ]);

        return $this->fetch();
    }

    // 数据
    public function getList () {
        try {
            // 参数
            $nextOffset = input('page/d', 0);
            $pageSize = input('limit/d', config('page_size'));
            $search = $this->search();
            $where = array_merge($search['where'], [
                ['act.activity_is_delete', '=', config('un_deleted')],
            ]);

            $appends = [
                'activity_correlation',
                'activity_note_preview',
                'activity_rule_preview',
                'activity_status_title',
                'activity_self_start_title'
            ];
            $join = [
                ['products pro', 'act.activity_type = 1 and act.product_id = pro.product_id', 'left'],
                ['cate cate', 'act.activity_type = 2 and act.cate_id = cate.cate_id', 'left'],
            ];
            $field = [
                'activity_id',
                'activity_name',
                'activity_start_time',
                'activity_end_time',
                'activity_status',
                'activity_discount',
                'activity_rule',
                'activity_note',
                'activity_type',
                'activity_is_self_start',
                'activity_create_time',
                'activity_sort',
                'pro.product_title',
                'cate.cate_title',
            ];
            $group = [];
            $order = [
                'act.activity_status' => 'asc',
                'act.activity_create_time' => 'desc',
            ];

            $data = app()->model('commonModel')->getList([
                'table' => \app\common\model\Activity::class,
                'pk' => 'activity_id',
                'as' => 'act',
            ], $field, $nextOffset, $pageSize, true, function (&$item) {
                return $item;
            }, $where, $search['whereOr'], $join, $order, $group, $appends)->toArray();

            $req = [
                'total' => $data['total'],
                'data' => $data['data'],
            ];
            ReqResp::outputSuccess($req);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 页面编辑
    public function viewEdit () {
        try {
            $params = input('post.', null);
            if (!$params) {
                throw new \Exception('无修改', ErrorCode::PARAMS_ERROR);
            }

            $rule = [
                'activity_name' => ['activity_name|活动名称' => 'require|length:1,20|unique:activity'],
                'activity_sort' => ['activity_sort|排序' => 'require|number|between:1,99999'],
                'activity_note' => ['activity_note|活动备注' => 'max:30'],
            ];
            $checkRule = [];
            foreach ($params as $k => $v) {
                if (isset($rule[$k])) {
                    $checkRule = $rule[$k];
                }
            }
            // 数据验证
            $result = $this->validate($params,$checkRule);
            if(true !== $result){
                throw new \Exception($result, ErrorCode::SUBMIT_PARAMS_VALIDATE_ERROR);
            }

            $res = app()->model('Activity')->allowField(true)->save($params, ['activity_id' => $params['activity_id']]);
            if ($res) {
                ReqResp::outputSuccess([], '修改成功');
            }
            throw new \Exception('修改失败');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    public function save () {
        $id = input('activity_id', -1);
        if ($id < 1) {
            $data = null;
        } else {
            $data = app()->model('common/Activity')->where(['activity_id' => $id])->append(['activity_cover_img_url'])->find();

            /*if ($data) {
                list($data['activity_start_time'], $data['start_time']) = explode(' ', $data['activity_start_time']);
                list($data['activity_end_time'], $data['end_time']) = explode(' ', $data['activity_end_time']);
            }*/
        }

        $proId = $data['product_id'] ? $data['product_id'] : [];
        $cateId = $data['cate_id'] ? $data['cate_id'] : [];
        $this->assign([
            'activityId' => $id,
            'productLists' => app()->model('common/Product')->activityViewProduct($proId, null),
            'cateLists' => app()->model('common/Cate')->activityViewCate($cateId),
            'data' => $data,
        ]);

        return $this->fetch();
    }
    
    // 保存信息
    public function doSave () {
        try {
            $params = input('post.', null);
            if (!$params) {
                throw new \Exception('请填写内容', ErrorCode::PARAMS_ERROR);
            }
            // 防止多情况出现
            // $params = array_merge(['activity_url' => '', 'product_id' => '', 'cate_id' => 0], $params);
            $where = [];
            if (isset($params['activity_id']) && $params['activity_id'] != -1) {
                $where = [
                    'activity_id' => $params['activity_id'],
                ];
            } else {
                unset($params['activity_id']);
            }

            $scene = '';
            if (isset($params['activity_type'])) {
                if ($params['activity_type'] == config('activity_type_extension')) {
                    $scene = 'extension';
                }
                if ($params['activity_type'] == config('activity_type_product')) {
                    $scene = 'product';
                }
                if ($params['activity_type'] == config('activity_type_cate')) {
                    $scene = 'cate';
                }
                if (!$scene) {
                    throw new \Exception('请选择正确活动类型', ErrorCode::PARAMS_ERROR);
                }
            } else {
                throw new \Exception('请选择活动类型', ErrorCode::PARAMS_ERROR);
            }

            // 数据验证
            $result = $this->validate($params,'common/Activity.' . $scene);
            if(true !== $result){
                throw new \Exception($result, ErrorCode::SUBMIT_PARAMS_VALIDATE_ERROR);
            }

            // $this->handleTimeField($params);

            Db::startTrans();
            $res = app()->model('common/Activity')->allowField(true)->save($params, $where);
            if ($res) {
                // 给相对应商品，分类添加activity_id
                $activityId = empty($where['activity_id']) ? app()->model('common/Activity')->getLastInsID() : $where['activity_id'];
                $row = false;
                if ($params['activity_type'] == config('activity_type_product') && $params['product_id']) {
                    $row = app()->model('common/Product')->setProductActivity($params['product_id'], $activityId);
                }
                if ($params['activity_type'] == config('activity_type_cate') && $params['cate_id']) {
                    $row = app()->model('common/Product')->setCateActivity($params['cate_id'], $activityId);
                }
                if ($params['activity_type'] != config('activity_type_extension') && false === $row) {
                    Db::rollback();
                    throw new \Exception('活动关联失败', ErrorCode::ACTION_FAILED);
                }

                Db::commit();
                ReqResp::outputSuccess([], '提交成功');
            }

            Db::rollback();
            throw new \Exception('提交失败', ErrorCode::ACTION_FAILED);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    private function handleTimeField (&$data) {
        $data['activity_start_time'] = strtotime($data['activity_start_time'] . $data['start_time']);
        $data['activity_end_time'] = strtotime($data['activity_end_time'] . $data['end_time']);
    }

    // 删除
    public function del () {
        try {
            $id = input('activity_id/a', []);
            if (!$id || count($id, true) < 1) {
                throw new \Exception('请选择要删除的活动', ErrorCode::PARAMS_ERROR);
            }

            // 删除验证
            $delActivity = app()->model('Activity')->whereIn('activity_id', $id)->whereIn('activity_status', config('activity_deletable_status'))->column('activity_id');
            if (empty($delActivity)) {
                throw new \Exception('您选择的活动暂时无法删除', ErrorCode::DELETE_FAILED);
            }

            $res = app()->model('Activity')->whereIn('activity_id', $delActivity)->setField('activity_is_delete', config('deleted'));
            if (!$res) {
                throw new \Exception('删除失败', ErrorCode::DELETE_FAILED);
            }
            if ($res < count($id)) {
                throw new \Exception('部分删除成功', ErrorCode::DELETE_FAILED);
            }
            app()->model('common/Product')->whereIn('activity_id', $delActivity)->setField('activity_id', 0);
            ReqResp::outputSuccess([], '删除成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 添加为自动开启活动
    public function addSelfStart () {
        // TODO 添加为自启动活动，只能添加开始活动时间未到的活动
        try {
            $id = input('activity_id', null);
            if (!$id) {
                throw new \Exception('参数错误', ErrorCode::PARAMS_ERROR);
            }

            // 查询当前活动信息
            $currActivity = Db::table('activity')->field([
                'activity_id', 'activity_name', 'activity_start_time', 'activity_end_time', 'activity_status',
            ])->where([
                'activity_id' => $id,
                'activity_is_delete' => config('un_deleted'),
            ])->find();

            // 判断活动时间及状态
            if ($currActivity['activity_status'] != config('activity_status_close')) {
                throw new \Exception('此活动当前状态无法设置自启动！', ErrorCode::ACTIVITY_NOT_SELF_START);
            }

            $result = $this->validate($currActivity, 'common/Activity.start');
            if (true !== $result) {
                throw new \Exception($result, ErrorCode::PARAMS_ERROR);
            }

            if ($currActivity['activity_start_time'] < (time() + 3660)) {
                throw new \Exception('当前活动距开始时间不足60分钟，无法设置自启动！', ErrorCode::ACTIVITY_NOT_SELF_START);
            }

            // 添加自启动数据
            $data = [
                'activity_id' => $id,
                'activity_self_show_time' => $currActivity['activity_start_time'] - 3600,
                'activity_start_time' => $currActivity['activity_start_time'],
                'activity_end_time' => $currActivity['activity_end_time'],
            ];

            Db::startTrans();
            $res = Db::table('activity_self_start_queue')->insert($data);
            if (!$res) {
                Db::rollback();
                throw new \Exception('自启动失败', ErrorCode::ACTIVITY_SELF_START_FAIL);
            }
            $row = Db::table('activity')->where(['activity_id' => $id])->setField('activity_is_self_start', config('activity_self_start_succ'));
            if (!$row) {
                Db::rollback();
                throw new \Exception('自启动失败', ErrorCode::ACTIVITY_SELF_START_FAIL);
            }

            Db::commit();
            ReqResp::outputSuccess([], '设置成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 开始活动
    public function startActivity () {
        // TODO 开始活动，只能开始活动时间已到的活动
        try {
            $id = input('activity_id', null);
            if (!$id) {
                throw new \Exception('参数错误', ErrorCode::PARAMS_ERROR);
            }

            // 查询当前活动信息
            $currActivity = Db::table('activity')->field([
                'activity_id', 'activity_name', 'activity_start_time', 'activity_end_time', 'activity_status',
            ])->where([
                'activity_id' => $id,
                'activity_is_delete' => config('un_deleted'),
            ])->find();

            // 判断当前活动状态
            // 判断活动时间及状态
            if ($currActivity['activity_status'] != config('activity_status_close')) {
                throw new \Exception('此活动当前状态无法启动！', ErrorCode::ACTIVITY_NOT_SELF_START);
            }

            $result = $this->validate($currActivity, 'common/Activity.start');
            if (true !== $result) {
                throw new \Exception($result, ErrorCode::PARAMS_ERROR);
            }

            // 查看当前活动是否设置自启动
            $isSelfStart = Db::table('activity_self_start_queue')->where([
                'activity_id' => $id,
                'activity_self_status' => config('activity_self_start_status_not'),
            ])->value('activity_id');

            Db::startTrans();
            // 更改当前活动状态
            $res = Db::table('activity')->where([
                'activity_id' => $id,
            ])->setField('activity_status', config('activity_status_start'));
            if (!$res) {
                Db::rollback();
                throw new \Exception('开始失败', ErrorCode::UPDATE_FAILED);
            }
            if ($isSelfStart) {
                // 将自启动标记为启动成功
                $row = Db::table('activity_self_start_queue')->where([
                    'activity_id' => $isSelfStart,
                ])->setField('activity_self_status', config('activity_self_start_status_succ'));
                if (!$row) {
                    Db::rollback();
                    throw new \Exception('开始失败', ErrorCode::UPDATE_FAILED);
                }
            }

            Db::commit();
            ReqResp::outputSuccess([], '开始成功，活动将在1分钟后进行展示');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
    
    // 暂停活动
    public function suspendActivity () {
        // TODO 暂停活动，对包含活动商品的未付款订单及包含商品生效
        try {
            $id = input('activity_id', null);
            if (!$id) {
                throw new \Exception('参数错误', ErrorCode::PARAMS_ERROR);
            }

            // 查询当前活动信息
            $currActivity = Db::table('activity')->field([
                'activity_id', 'activity_name', 'activity_start_time', 'activity_end_time', 'activity_status',
            ])->where([
                'activity_id' => $id,
                'activity_is_delete' => config('un_deleted'),
            ])->find();

            // 判断活动必须已启动
            if ($currActivity['activity_status'] != config('activity_status_start')) {
                throw new \Exception('活动无法暂停', ErrorCode::ACTION_FAILED);
            }

            // 将活动状态改为暂停
            $res = app()->model('Activity')->where([
                'activity_id' => $id,
            ])->setField('activity_status', config('activity_status_suspend'));
            if (!$res) {
                throw new \Exception('暂停失败', ErrorCode::UPDATE_FAILED);
            }

            ReqResp::outputSuccess([], '暂停成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }
    
    // 结束活动
    public function endActivity () {
        // TODO 提前结束，提前结束后，对包含活动商品的未付款订单及包含商品生效
        try {
            $id = input('activity_id', null);
            if (!$id) {
                throw new \Exception('参数错误', ErrorCode::PARAMS_ERROR);
            }

            // 查询当前活动信息
            $currActivity = Db::table('activity')->field([
                'activity_id', 'activity_name', 'activity_start_time', 'activity_end_time', 'activity_status',
            ])->where([
                'activity_id' => $id,
                'activity_is_delete' => config('un_deleted'),
            ])->find();

            // 判断活动必须已开始活暂停
            if (!in_array($currActivity['activity_status'] , config('activity_ended_status'))) {
                throw new \Exception('活动无法结束', ErrorCode::ACTION_FAILED);
            }

            // 将活动状态改为结束
            $res = app()->model('Activity')->alias('act')->where([
                'act.activity_id' => $id,
            ])->join([
                ['products pro', 'act.activity_id = pro.activity_id', 'left'],
            ])->setField([
                'act.activity_status' => config('activity_status_end'),
                'pro.activity_id' => 0
            ]);
            if (!$res) {
                throw new \Exception('活动结束失败', ErrorCode::UPDATE_FAILED);
            }

            ReqResp::outputSuccess([], '活动结束成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 重启开始
    public function reStartActivity () {
        // TODO 重启活动，只能重启已暂停，且活动时间未过期的活动
        try {
            $id = input('activity_id', null);
            if (!$id) {
                throw new \Exception('参数错误', ErrorCode::PARAMS_ERROR);
            }

            // 查询当前活动信息
            $currActivity = Db::table('activity')->field([
                'activity_id', 'activity_name', 'activity_start_time', 'activity_end_time', 'activity_status',
            ])->where([
                'activity_id' => $id,
                'activity_is_delete' => config('un_deleted'),
            ])->find();

            // 判断活动必须已暂停
            if ($currActivity['activity_status'] != config('activity_status_suspend')) {
                throw new \Exception('活动无法重新开始', ErrorCode::ACTION_FAILED);
            }

            // 将活动状态改为暂停
            $res = app()->model('Activity')->where([
                'activity_id' => $id,
            ])->setField('activity_status', config('activity_status_start'));
            if (!$res) {
                throw new \Exception('重新开始失败', ErrorCode::UPDATE_FAILED);
            }

            ReqResp::outputSuccess([], '重新开始成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 复制活动
    public function copyActivity () {
        // TODO 复制活动，复制  . 活动名称, 开始时间，结束时间赋空值，状态为关闭，未设置自启动
        try {
            $id = input('activity_id', null);
            if (!$id) {
                throw new \Exception('参数错误', ErrorCode::PARAMS_ERROR);
            }

            // 查询当前活动信息
            $currActivity = Db::table('activity')->field(true)->where([
                'activity_id' => $id,
                'activity_is_delete' => config('un_deleted'),
            ])->find();

            if (false === strpos($currActivity['activity_name'], '复制活动_')) {
                $currActivity['activity_name'] = '复制活动_' . $currActivity['activity_name'];
            }

            // 初始化活动状态
            $currActivity['activity_start_time'] = time();
            $currActivity['activity_end_time'] = time();
            $currActivity['activity_status'] = config('activity_status_close');

            // 删除订单编辑项
            unset($currActivity['activity_id']);
            unset($currActivity['cate_id']);
            unset($currActivity['activity_create_time']);
            unset($currActivity['activity_update_time']);

            // 添加数据
            $res = app()->model('Activity')->allowField(true)->save($currActivity);
            if (!$res) {
                throw new \Exception('复制失败', ErrorCode::ACTION_FAILED);
            }

            ReqResp::outputSuccess([], '复制成功');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 查询方法
    protected function search () {
        $search = input('search', null);
        $startTime = input('start', '');
        $endtime = input('end', '');

        $isSelfStart = input('is_self_start', -1);
        $status = input('activity_status', -1);
        $activityType = input('activity_type', -1);

        $where = [];
        $whereOr = [];
        $formget = [];
        if ($search) {
            $where[] = ['act.activity_name', 'like','%' . $search . '%'];
            $formget['search'] = $search;
        } else {
            $formget['search'] = '';
        }

        if (-1 != $isSelfStart) {
            $where[] = ['act.is_self_start', '=', $isSelfStart];
        }
        $formget['is_self_start'] = $isSelfStart;

        if (-1 != $status) {
            $where[] = ['act.activity_status', '=', $status];
        }
        $formget['activity_status'] = $status;

        if (-1 != $activityType) {
            $where[] = ['act.activity_type', '=', $activityType];
        }
        $formget['activity_type'] = $activityType;


        if (!empty($startTime)) {
            $where[] = ['act.activity_create_time', '>',$startTime];
            $formget['start_time'] = $startTime;
        } else {
            $formget['start_time'] = '';
        }
        if (!empty($endtime)) {
            $where[] = ['act.activity_create_time', '<',$endtime];
            $formget['end_time'] = $endtime;
        } else {
            $formget['end_time'] = '';
        }
        if (!empty($startTime) && !empty($endtime)) {
            if ($startTime < $endtime) {
                $where[] = ['act.activity_create_time','between',[$startTime,$endtime]];
            } else {
                $where[] = ['act.activity_create_time','between',[$endtime,$startTime]];
            }
        }

        $search = [
            'where' => $where,
            'whereOr' => $whereOr,
            'formget' => $formget,
        ];
        return $search;
    }
}
