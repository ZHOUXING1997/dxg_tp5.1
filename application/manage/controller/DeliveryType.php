<?php
/**
 * User: 周星
 * Date: 2019/4/12
 * Time: 12:00
 * Email: zhouxing@benbang.com
 */

namespace app\manage\controller;

use app\common\controller\AdminBase;
use app\common\model\CommonModel;
use util\ErrorCode;
use util\ReqResp;
use util\Pay;

// 用户管理
class DeliveryType extends AdminBase {

    public function initialize () {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index () {
        return $this->fetch();
    }

    public function getList () {
        try {
            // 参数
            $nextOffset = input('page/d', 0);
            $pageSize = input('limit/d', config('page_size'));
            $search = $this->search();

            $join = [];
            $field = [
                'delivery_id',
                'delivery_title',
                'delivery_name',
                'delivery_mobile',
                'delivery_create_time'
            ];
            $group = [];
            $order = ['delivery_id' => 'desc'];
            $appends = [];

            $data = app()->model('commonModel')->getList([
                'table' => \app\common\model\DeliveryType::class,
                'pk' => 'delivery_id',
                'as' => 'delivery',
            ], $field, $nextOffset, $pageSize, true, function (&$item) {
                return $item;
            }, $search['where'], $search['whereOr'], $join, $order, $group, $appends)->toArray();

            $req = [
                'total' => $data['total'],
                'data' => $data['data'],
            ];
            ReqResp::outputSuccess($req);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    public function viewEdit () {
        try {
            $params = input('post.', null);
            if (!$params) {
                throw new \Exception('无修改', ErrorCode::PARAMS_ERROR);
            }

            $rule = [
                'user_note' => ['user_note|备注' => 'require|length:1,30',],
            ];
            $checkRule = [];
            foreach ($params as $k => $v) {
                if (isset($rule[$k])) {
                    $checkRule = $rule[$k];
                }
            }
            // 数据验证
            $result = $this->validate($params,$checkRule);
            if(true !== $result){
                throw new \Exception($result, ErrorCode::SUBMIT_PARAMS_VALIDATE_ERROR);
            }

            $res = app()->model('User')->allowField(true)->saveData($params, ['user_id' => $params['user_id']]);
            if ($res) {
                ReqResp::outputSuccess([], '修改成功');
            }
            throw new \Exception('修改失败');
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 添加/编辑页
    public function save () {
        $id = input('delivery_id', -1);
        if ($id < 1) {
            $data = null;
        } else {
            $data = app()->model('common/DeliveryType')->where(['delivery_id' => $id])->find();
        }

        $this->assign([
            'deliveryId' => $id,
            'data' => urlencode(json_encode($data))
        ]);

        return $this->fetch();
    }

    // 添加/编辑提交
    public function doSave () {
        try {
            $params = input('post.', null);
            if (!$params) {
                throw new \Exception('请填写内容', ErrorCode::PARAMS_ERROR);
            }
            $where = [];
            if (isset($params['delivery_id']) && $params['delivery_id'] != -1) {
                $where = [
                    'delivery_id' => $params['delivery_id'],
                ];
            } else {
                unset($params['delivery_id']);
            }

            // 数据验证
            $result = $this->validate($params,'common/DeliveryType');
            if(true !== $result){
                throw new \Exception($result, ErrorCode::SUBMIT_PARAMS_VALIDATE_ERROR);
            }

            $res = app()->model('common/DeliveryType')->allowField(true)->save($params, $where);
            if ($res) {
                ReqResp::outputSuccess([], '提交成功');
            }

            throw new \Exception('提交失败', ErrorCode::ACTION_FAILED);
        } catch (\Exception $e) {
            ReqResp::outputFail($e);
        }
    }

    // 查询方法
    protected function search () {
        $search = input('search', null);
        $where = [
            ['delivery_is_delete', '=', config('un_deleted')]
        ];
        $whereOr = [];
        $formget = [];
        if ($search) {
            $where[] = ['delivery_title|delivery_name|delivery_mobile', 'like','%' . $search . '%'];
            $formget['search'] = $search;
        } else {
            $formget['search'] = '';
        }

        $search = [
            'where' => $where,
            'whereOr' => $whereOr,
            'formget' => $formget,
        ];
        return $search;
    }
}